"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7387],{1241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"deploy/argocd_applications","title":"Notes on ArgoCD Applications","description":"This repository stores the ApplicationsSets that will be deployed on ArgoCD. The ArgoCD instance contains the vals plugin which can be used to retrieve secrets from Gitlab CI Variables (see below).","source":"@site/docs/deploy/argocd_applications.md","sourceDirName":"deploy","slug":"/deploy/argocd_applications","permalink":"/deploy/argocd_applications","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Components installation","permalink":"/deploy/install_components"},"next":{"title":"Components","permalink":"/operate/components"}}');var i=n(4848),o=n(8453);const s={sidebar_position:4},r="Notes on ArgoCD Applications",l={},c=[{value:"Workflow",id:"workflow",level:2},{value:"Storing secrets in Gitlab",id:"storing-secrets-in-gitlab",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"notes-on-argocd-applications",children:"Notes on ArgoCD Applications"})}),"\n",(0,i.jsxs)(t.p,{children:["This repository stores the ApplicationsSets that will be deployed on ArgoCD. The ArgoCD instance contains the ",(0,i.jsx)(t.strong,{children:"vals"})," plugin which can be used to retrieve secrets from Gitlab CI Variables (see below)."]}),"\n",(0,i.jsx)(t.h2,{id:"workflow",children:"Workflow"}),"\n",(0,i.jsx)(t.p,{children:"We consider those components:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Gitlab CI Variables (or Gitlab): Key Value secret manager."}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://argo-cd.readthedocs.io/en/stable/",children:"ArgoCD"}),": GitOps operator that automatically watches the drift between the Kubernetes cluster and the Gitlab repositories."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/helmfile/vals",children:"helm-secrets with vals"}),": ArgoCD Plugin to inject Gitlab values during deployments. Its integration was done with the help of ",(0,i.jsx)(t.a,{href:"https://github.com/jkroepke/helm-secrets/wiki/ArgoCD-Integration",children:"its official documentation"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.mermaid,{value:'sequenceDiagram\n    actor Developer\n    participant Repository\n    participant ArgoCD\n    participant vals\n    participant Gitlab\n    participant Example Namespace\n    participant ArgoCD Namespace\n\n    alt Create ApplicationSet\n        Developer ->> Repository: create new ApplicationSet for "example" application\n        Repository ->> ArgoCD Namespace: trigger pipeline to deploy ApplicationSet\n        ArgoCD -> ArgoCD Namespace: automatically notice new or modified ApplicationSet\n        activate ArgoCD\n        deactivate ArgoCD\n    else Modify Helm chart\n        Developer ->> Repository: push chart modifications\n        ArgoCD -> Repository: automatically notice change between repo and cluster\n        activate ArgoCD\n        deactivate ArgoCD\n    end\n    activate ArgoCD\n    ArgoCD ->> vals: send new values to be templated\n    vals ->> Gitlab: ask for secrets\n    Gitlab ->> ArgoCD: inject secrets to chart\n    ArgoCD ->> Example Namespace: deploy chart\n    deactivate ArgoCD'}),"\n",(0,i.jsx)(t.h2,{id:"storing-secrets-in-gitlab",children:"Storing secrets in Gitlab"}),"\n",(0,i.jsxs)(t.p,{children:["ArgoCD uses ",(0,i.jsx)(t.code,{children:"vals"})," to inject Gitlab values on a project, which is transparent for the Helm/Kubernetes developer. You only have to set:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["the ",(0,i.jsx)(t.a,{href:"https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/",children:"ApplicationSet"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'---\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: example\n  namespace: argocd\nspec:\n  generators:\n    - list:\n        elements:\n          - namespace: "shared"\n            project: "prod"\n            branch: "main"\n  template:\n    metadata:\n      name: "example-{{ project }}"\n      namespace: argocd\n    spec:\n      project: "{{ project }}"\n      syncPolicy:\n        automated:\n          prune: true\n          allowEmpty: true\n        syncOptions:\n          - CreateNamespace=true\n      sources:\n        - chart: example\n          repoURL: https://charts.registry.com/\n          targetRevision: 1.2.3 # Version of the chart\n          helm:\n            releaseName: my-release\n            valueFiles:\n              - $values/components/example/values.ref.yaml # One global values file\n              - $values/components/example/values.{{ project }}.yaml # One values file per environment, potentially containing secrets references with vals\n        - repoURL: "https://git.instance.com/my/repo.git" # Do not forget \'.git\'\n          targetRevision: "{{ branch }}" # Git repository branch\n          ref: values\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: "{{ namespace }}"\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["values with reference to Gitlab variables keys. The ",(0,i.jsx)(t.code,{children:"123456"})," is the project ID of your Gitlab repository:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'# values/values-ssg-dev.yaml\nmy_big_secret: ref+gitlab://git.instance.com/123456/my-variable # This way, vals wil retrieve the value of "my-variable"\nother_value: "my value"\nanother_one: 738\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"on Gitlab, the defined secret. It is recommended to set them using Tofu, especially if an application needs generated credentials."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Vals is also compatible with other backends, if you do not want to use Gitlab CI Variables, you can find the complete list of supported backends in the ",(0,i.jsx)(t.a,{href:"https://github.com/helmfile/vals?tab=readme-ov-file#supported-backends",children:"official documentation"}),"."]})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);